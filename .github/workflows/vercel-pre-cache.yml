name: Pre-cache Vercel Pages

on:
  pull_request:
    branches:
      - master
    types:
      - closed

jobs:
  precache-vercel:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache
        uses: actions/cache@v4.1.2

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Compile and run urls.ts
        env:
          NEXT_PUBLIC_PRODUCTION_URL: ${{ vars.NEXT_PUBLIC_PRODUCTION_URL }}
        run: |
          node --loader ts-node/esm scripts/urls.ts

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Wait for Vercel Deployment
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          echo "Checking Vercel deployment status..."
          MAX_RETRIES=30
          RETRY_COUNT=0
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            RESPONSE=$(curl -X GET "https://api.vercel.com/v6/deployments" \
              -d "projectId=$VERCEL_PROJECT_ID" \
              -d "limit=1" \
              -d "target=production" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $VERCEL_TOKEN")
            DEPLOYMENT_STATUS=$(echo "$RESPONSE" | jq -r '.deployments[0] .state')
            echo "Current deployment status: $DEPLOYMENT_STATUS"
            if [ "$DEPLOYMENT_STATUS" == "READY" ]; then
              echo "Deployment is ready!"
              break
            elif [ "$DEPLOYMENT_STATUS" == "ERROR" ]; then
              echo "Deployment failed."
              exit 1
            else
              echo "Deployment is not ready yet. Waiting..."
              sleep 10
              RETRY_COUNT=$((RETRY_COUNT+1))
            fi
          done
          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "Deployment is taking too long."
            exit 1
          fi

      - name: Read URLs and request each one
        run: |
          while IFS= read -r url; do
            echo "Requesting $url..."
            STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$url")
            if [ "$STATUS_CODE" -ne 200 ]; then
              echo "Failed to fetch $url - Status code: $STATUS_CODE"
            else
              echo "Successfully fetched $url - Status code: $STATUS_CODE"
            fi
          done < urls.txt